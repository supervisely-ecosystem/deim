__include__: [
  '../dataset/coco_detection.yml',
  '../runtime.yml',
  '../base/dataloader.yml',
  '../base/optimizer.yml',
  '../base/deimv2.yml'
]

output_dir: ./outputs/deimv2_hgnetv2_x_coco


HGNetv2:
  name: 'B5'
  return_idx: [1, 2, 3]
  freeze_stem_only: True
  freeze_at: 0
  freeze_norm: True

HybridEncoder:
  # intra
  hidden_dim: 384
  dim_feedforward: 2048

DEIMTransformer:
  feat_channels: [384, 384, 384]    # [256, 256, 256]
  reg_scale: 8   # 4

  # FFN
  dim_feedforward: 2048

optimizer:
  type: AdamW
  params: 
    - 
      params: '^(?=.*backbone)(?!.*norm|bn).*$'
      lr: 0.000005   
    - 
      params: '^(?=.*(?:encoder|decoder))(?=.*(?:norm|bn)).*$'
      weight_decay: 0.

  lr: 0.0005
  betas: [0.9, 0.999]
  weight_decay: 0.000125
  
# Increase to search for the optimal ema
epoches: 58 # 72 + 2n

## Our LR-Scheduler
flat_epoch: 29    # 4 + epoch // 2, e.g., 40 = 4 + 72 / 2
no_aug_epoch: 8

train_dataloader: 
  dataset: 
    transforms:
      policy:
        epoch: [4, 29, 50]   # list 

  collate_fn:
    ema_restart_decay: 0.9998
    base_size_repeat: 3
